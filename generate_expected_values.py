import numpy as np

def generate_constellation(qam_size):
    if qam_size not in [16, 64, 128, 256]:
        raise ValueError(f"Unsupported QAM size: {qam_size}")

    if qam_size == 128:
        coords_i = np.arange(-7, 8, 2)  # 8 points for I-axis
        coords_q = np.arange(-15, 16, 2)  # 16 points for Q-axis
        I, Q = np.meshgrid(coords_i, coords_q)
        points = I.flatten() + 1j * Q.flatten()
    else:
        points_per_axis = int(np.sqrt(qam_size))
        coords = np.arange(-points_per_axis + 1, points_per_axis, 2)
        I, Q = np.meshgrid(coords, coords)
        points = I.flatten() + 1j * Q.flatten()

    avg_power = np.mean(np.abs(points)**2)
    norm_points = points / np.sqrt(avg_power)
    return norm_points

def to_fixed_point(value, int_bits=4, frac_bits=12):
    """Convert float to 16-bit fixed-point (Q4.12)."""
    scale = 2**frac_bits
    value = np.clip(value * scale, -2**(int_bits + frac_bits - 1), 2**(int_bits + frac_bits - 1) - 1)
    return int(np.round(value))

def generate_vhdl_expected_values(qam_size):
    points = generate_constellation(qam_size)
    vhdl_code = f"-- Expected values for QAM-{qam_size}\n"
    vhdl_code += f"constant EXPECTED_QAM_{qam_size}_I : lut_array_{qam_size} := (\n"
    for i, p in enumerate(points):
        vhdl_code += f"    {i} => to_signed({to_fixed_point(p.real)}, 16),\n"
    vhdl_code += f"    others => (others => '0')\n);\n"
    vhdl_code += f"constant EXPECTED_QAM_{qam_size}_Q : lut_array_{qam_size} := (\n"
    for i, p in enumerate(points):
        vhdl_code += f"    {i} => to_signed({to_fixed_point(p.imag)}, 16),\n"
    vhdl_code += f"    others => (others => '0')\n);\n"
    return vhdl_code

# VHDLパッケージファイルに書き出し
with open("qam_expected_pkg.vhd", "w") as f:
    f.write("----------------------------------------------------------------\n")
    f.write("-- This file is auto-generated by generate_vhdl_expected_values.py\n")
    f.write("-- DO NOT EDIT MANUALLY\n")
    f.write("----------------------------------------------------------------\n\n")
    f.write("library IEEE;\n")
    f.write("use IEEE.std_logic_1164.all;\n")
    f.write("use IEEE.numeric_std.all;\n\n")
    f.write("package qam_expected_pkg is\n")
    f.write("    -- Type definitions for LUT arrays\n")
    f.write("    type lut_array_16 is array (0 to 15) of signed(15 downto 0);\n")
    f.write("    type lut_array_64 is array (0 to 63) of signed(15 downto 0);\n")
    f.write("    type lut_array_128 is array (0 to 127) of signed(15 downto 0);\n")
    f.write("    type lut_array_256 is array (0 to 255) of signed(15 downto 0);\n\n")
    
    for qam_size in [16, 64, 128, 256]:
        f.write(generate_vhdl_expected_values(qam_size))
        f.write("\n")
    
    f.write("end package qam_expected_pkg;\n")
